version: '3.8'
services:
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      - kafka1
      - connect
    links:
      - kafka1:kafka1
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:19092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://connect:8083
    networks:
      - internal_network
  questdb:
    image: questdb/questdb:7.0.1
    container_name: "questdb"
    restart: always
    ports:
      - "9000:9000"
      - "8812:8812"
      - "9009:9009"
    volumes:
      - questdbvolume:/root/.questdb
    environment:
      - JAVA_OPTS=-Djava.locale.providers=JRE,SPI
    networks:
      - internal_network
  zookeeper:
    image: zookeeper:3.6.2
    ports:
      - "2181:2181"
    networks:
      - internal_network
  kafka1:
    container_name: "kafka1"
    image: confluentinc/cp-kafka:7.4.1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9997:9997"
    depends_on:
      - zookeeper
    links:
      - zookeeper:zookeeper
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1 
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      #KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=9997
    networks:
      - internal_network
  kafka-init:
    image: confluentinc/cp-kafka:7.4.1
    depends_on:
      kafka1:
        condition: service_started
    command: "bash -c '/usr/bin/kafka_init.sh'"
    volumes:
      - type: bind
        source: ./docker/kafka_init.sh
        target: /usr/bin/kafka_init.sh
    networks:
      - internal_network
  connector-init:
    build:
      dockerfile: ./docker/Dockerfile_connector
      context: .
    depends_on:
      kafka1:
        condition: service_started
    networks:
      - internal_network
  connect:
    image: kafka-connect-with-questdb
    build:
      dockerfile: ./docker/Dockerfile_connect
      context: .
    ports:
      - "8083:8083"
      - "9999:9999"
    depends_on:
      - questdb
      - kafka1
    links:
      - kafka1:kafka1
      - questdb:questdb
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:19092"
      CONNECT_GROUP_ID: "quest_grp"
      CONNECT_CONFIG_STORAGE_TOPIC: _connect_configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: _connect_offset
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: _connect_status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      #KAFKA_JMX_HOSTNAME: 127.0.0.1
      #KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: "-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
    networks:
      - internal_network
  redis:
    image: redis/redis-stack:latest
    container_name: "redis"
    restart: always
    ports:
      - '6379:6379'
    expose:
      - 6379
    volumes:
        - redisvolume:/data
    networks:
      - internal_network
  locationrecorder:
    container_name: "location_recorder"
    build:
      dockerfile: ./docker/Dockerfile_location_recorder
      context: .
    depends_on:
      - kafka1
      - redis
    links:
      - kafka1:kafka1
      - redis:redis
    restart: on-failure
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - internal_network
  postgres:
    image: postgis/postgis:16-3.4
    container_name: "postgis"
    volumes:
      - type: bind
        source: ./database.sql
        target: /var/database.sql
      - type: bind
        source: ./docker/init-postgres.sh
        target: /docker-entrypoint-initdb.d/init-postgres.sh
      - postgresvolume:/var/lib/postgresql
    environment:
      - POSTGRES_DB=data
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      - RUN_AS_ROOT=true
    ports:
        - "25432:5432"
    restart: on-failure
    networks:
      - internal_network
  collisionrecorder:
    container_name: "collision_recorder"
    build:
      dockerfile: ./docker/Dockerfile_collisions_recorder
      context: .
    restart: on-failure
    depends_on:
      mongodb:
        condition: service_started
      kafka1:
        condition: service_started
    networks:
      - internal_network
  collisiontracker:
    container_name: "collision_tracker"
    build:
      dockerfile: ./docker/Dockerfile_collisions_tracker
      context: .
    restart: on-failure
    ports:
      - "9998:9998"
    depends_on:
      postgres:
        condition: service_started
      kafka1:
        condition: service_started
    environment:
      JAVA_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9998 -Dcom.sun.management.jmxremote.rmi.port=9998 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1"
    networks:
      - internal_network
  producer:
    build:
      dockerfile: ./docker/Dockerfile_producer
      context: .
    depends_on:
      - kafka1
    networks:
      - internal_network
  api_collisions:
    container_name: api_collisions
    build:
        context: .
        dockerfile: docker/Dockerfile_api_collisions
    depends_on:
        mongodb:
          condition: service_started
        redis:
          condition: service_started
        postgres:
          condition: service_started
    restart: on-failure
    ports:
      - "8100"
    networks:
      - internal_network
  api_historical:
    container_name: api_historical
    build:
      context: .
      dockerfile: docker/Dockerfile_api_historical
    depends_on:
      questdb:
        condition: service_started
      redis:
        condition: service_started
      postgres:
        condition: service_started
    restart: on-failure
    ports:
      - "8101"
    networks:
      - internal_network
  api_realtime:
    container_name: api_realtime
    build:
      context: .
      dockerfile: docker/Dockerfile_api_rt_locations
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_started
    restart: on-failure
    ports:
      - "8102"
    networks:
      - internal_network
  nginx:
    container_name: "nginx"
    image: nginx:alpine
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/nginx.conf:ro
      - nginxcache:/var/cache/nginx
    ports:
      - "8088:80"
    depends_on:
      - api_collisions
      - api_historical
      - api_realtime
    networks:
      - internal_network
  mongodb:
    container_name: "mongodb"
    image: mongodb/mongodb-community-server:6.0-ubi8
    ports:
      - "7017:27017"
    volumes:
      - mongodbvolume:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
    networks:
      - internal_network
networks:
  internal_network:
    driver: bridge
volumes:
  questdbvolume:
  redisvolume:
  postgresvolume:
  nginxcache:
  mongodbvolume: