version: '3.8'
services:
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    dns:
        - 8.8.8.8
        - 8.8.4.4
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cluster_0
      KAFKA_CLUSTERS_0_ID: lkc-jzxz78
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "pkc-z1o60.europe-west1.gcp.confluent.cloud:9092"
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: SASL_SSL
      KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM: PLAIN
      KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username='API KEY' password='API SECRET';
    networks:
      - internal_network
  questdb:
    image: questdb/questdb:7.0.1
    container_name: "questdb"
    restart: always
    volumes:
      - questdbvolume:/root/.questdb
    dns:
      - 8.8.8.8
      - 8.8.4.4
    ports:
      - "9000:9000"
      - "8812:8812"
      - "9009:9009"
    environment:
      - JAVA_OPTS=-Djava.locale.providers=JRE,SPI
    networks:
      - internal_network
  connect:
    image: kafka-connect-with-questdb
    build:
      dockerfile: ./docker/Dockerfile_connect
      context: .
    ports:
      - "8083:8083"
      - "9999:9999"
    depends_on:
      - questdb
    links:
      - questdb:questdb
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "pkc-z1o60.europe-west1.gcp.confluent.cloud:9092"
      CONNECT_GROUP_ID: "quest_grp"
      CONNECT_CONFIG_STORAGE_TOPIC: _connect_configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_STORAGE_TOPIC: _connect_offset
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: _connect_status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_SECURITY_PROTOCOL: "SASL_SSL"
      CONNECT_SASL_MECHANISM: "PLAIN"
      CONNECT_SASL_USERNAME: "API KEY"
      CONNECT_SASL_PASSWORD: "API SECRET"
      CONNECT_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.plain.PlainLoginModule required username='API KEY' password='API SECRET';"
      CONNECT_CLIENT_DNS_LOOKUP: "use_all_dns_ips"
      CONNECT_ENABLE_AUTO_COMMIT: "true"
      #KAFKA_JMX_HOSTNAME: 127.0.0.1
      #KAFKA_JMX_PORT: 9997
      #KAFKA_JMX_OPTS: "-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
    networks:
      - internal_network
  redis:
    image: redis/redis-stack:latest
    container_name: "redis"
    restart: always
    ports:
      - '6379:6379'
    expose:
      - 6379
    networks:
      - internal_network
  locationrecorder:
    build:
      dockerfile: ./docker/Dockerfile_location_recorder
      context: .
    depends_on:
      - redis
    dns:
      - 8.8.8.8
      - 8.8.4.4
    links:
      - redis:redis
    restart: on-failure
    deploy:
      replicas: 1
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - internal_network
  postgres:
    image: postgis/postgis:16-3.4
    container_name: "postgis"
    volumes:
      - type: bind
        source: ./database.sql
        target: /var/database.sql
      - type: bind
        source: ./docker/init-postgres.sh
        target: /docker-entrypoint-initdb.d/init-postgres.sh
    environment:
      - POSTGRES_DB=data
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      - RUN_AS_ROOT=true
    ports:
        - "25432:5432"
    restart: on-failure
    networks:
      - internal_network
  collisionrecorder:
    build:
      dockerfile: ./docker/Dockerfile_collisions_recorder
      context: .
    restart: on-failure
    deploy:
      replicas: 1
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      mongodb:
        condition: service_started
    networks:
      - internal_network
  collisiontracker:
    build:
      dockerfile: ./docker/Dockerfile_collisions_tracker
      context: .
    restart: on-failure
    deploy:
      replicas: 1
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      postgres:
        condition: service_started
    networks:
      - internal_network
  producer:
    dns:
      - 8.8.8.8
      - 8.8.4.4
    build:
      dockerfile: ./docker/Dockerfile_producer
      context: .
    deploy:
      replicas: 1
    networks:
      - internal_network
  api_collisions:
    build:
        context: .
        dockerfile: docker/Dockerfile_api_collisions
    depends_on:
        mongodb:
          condition: service_started
        redis:
          condition: service_started
        postgres:
          condition: service_started
    restart: on-failure
    deploy:
      replicas: 1
    ports:
      - "8100"
    networks:
      - internal_network
  api_historical:
    build:
      context: .
      dockerfile: docker/Dockerfile_api_historical
    depends_on:
      questdb:
        condition: service_started
      redis:
        condition: service_started
      postgres:
        condition: service_started
    restart: on-failure
    deploy:
      replicas: 1
    ports:
      - "8101"
    networks:
      - internal_network
  api_realtime:
    build:
      context: .
      dockerfile: docker/Dockerfile_api_rt_locations
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_started
    restart: on-failure
    deploy:
      replicas: 1
    ports:
      - "8102"
    networks:
      - internal_network
  nginx:
    container_name: "nginx"
    image: nginx:alpine
    ports:
      - "8088:80"
    depends_on:
      - api_collisions
      - api_historical
      - api_realtime
    networks:
      - internal_network
  mongodb:
    container_name: "mongodb"
    image: mongodb/mongodb-community-server:6.0-ubi8
    ports:
      - "7017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
    networks:
      - internal_network
networks:
  internal_network:
    driver: bridge
volumes:
  questdbvolume: