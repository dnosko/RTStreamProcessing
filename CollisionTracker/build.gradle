// see https://nightlies.apache.org/flink/flink-docs-stable/docs/dev/configuration/overview/#gradle-build-script

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building an application
    id 'application'
    // Apply the Maven publish plugin to publish resulting artefacts into a Maven repository
    id 'maven-publish'
    // Apply the shadow plugin to produce fat JARs
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = "collisionTracker"
version = "1.0-SNAPSHOT"
mainClassName = 'consumers.CollisionTracker'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.flink:flink-clients:1.18.0'
    implementation 'org.apache.flink:flink-connector-kafka:3.1.0-1.18'
    implementation "org.apache.flink:flink-streaming-java:1.18.0"
    implementation "org.apache.flink:flink-connector-files:1.18.0"
    implementation 'org.slf4j:slf4j-api:1.7.36'


    compileOnly 'org.projectlombok:lombok:1.18.22'


    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")

    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.21.1"
    runtimeOnly "org.apache.logging.log4j:log4j-api:2.21.1"
    runtimeOnly "org.apache.logging.log4j:log4j-core:2.21.1"
}

configurations {
    flinkShadowJar // dependencies which go into the shadowJar
    // always exclude these (also from transitive dependencies) since they are provided by Flink
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}

sourceSets {
    // make compileOnly dependencies available for tests
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar
    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar
    javadoc.classpath += configurations.flinkShadowJar
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    useJUnitPlatform()
}


run {
    classpath = sourceSets.main.runtimeClasspath
}

tasks.test {
    useJUnitPlatform()
}

// https://imperceptiblethoughts.com/shadow/configuration/reproducible-builds/
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'), 'Build-Jdk': System.getProperty('java.version'), 'Main-Class': mainClassName
    }
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar, project.configurations.runtimeClasspath]
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    archiveClassifier = 'fat'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    zip64 true
    with jar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = 'build-repository'
            url = "file://${buildDir}/mvn-repo"
        }
    }
}